/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IQFirstContract {
  export type MessageStruct = {
    name: string;
    theAddress: string;
    timestamp: BigNumberish;
  };

  export type MessageStructOutput = [string, string, BigNumber] & {
    name: string;
    theAddress: string;
    timestamp: BigNumber;
  };
}

export interface IQFirstContractInterface extends utils.Interface {
  contractName: "IQFirstContract";
  functions: {
    "AllMessage(uint256)": FunctionFragment;
    "addMessage(string)": FunctionFragment;
    "getAllMessage()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AllMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addMessage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllMessage",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "AllMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IQFirstContract extends BaseContract {
  contractName: "IQFirstContract";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IQFirstContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AllMessage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        theAddress: string;
        timestamp: BigNumber;
      }
    >;

    addMessage(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllMessage(
      overrides?: CallOverrides
    ): Promise<[IQFirstContract.MessageStructOutput[]]>;
  };

  AllMessage(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      name: string;
      theAddress: string;
      timestamp: BigNumber;
    }
  >;

  addMessage(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllMessage(
    overrides?: CallOverrides
  ): Promise<IQFirstContract.MessageStructOutput[]>;

  callStatic: {
    AllMessage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        theAddress: string;
        timestamp: BigNumber;
      }
    >;

    addMessage(name: string, overrides?: CallOverrides): Promise<void>;

    getAllMessage(
      overrides?: CallOverrides
    ): Promise<IQFirstContract.MessageStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    AllMessage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addMessage(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllMessage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AllMessage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addMessage(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
