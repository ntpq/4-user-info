/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IQFirstContract,
  IQFirstContractInterface,
} from "../IQFirstContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "AllMessage",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "theAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "addMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllMessage",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "theAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct IQFirstContract.Message[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636a226a491461004657806371a7c0ec146100625780638f8586d214610094575b600080fd5b610060600480360381019061005b91906104e8565b6100b2565b005b61007c60048036038101906100779190610531565b61018d565b60405161008b93929190610707565b60405180910390f35b61009c61026f565b6040516100a991906106e5565b60405180910390f35b60004290506000339050600060405180606001604052808581526020018373ffffffffffffffffffffffffffffffffffffffff16815260200184815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906101349291906103c0565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201555050505050565b6000818154811061019d57600080fd5b90600052602060002090600302016000915090508060000180546101c09061087f565b80601f01602080910402602001604051908101604052809291908181526020018280546101ec9061087f565b80156102395780601f1061020e57610100808354040283529160200191610239565b820191906000526020600020905b81548152906001019060200180831161021c57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156103b757838290600052602060002090600302016040518060600160405290816000820180546102c69061087f565b80601f01602080910402602001604051908101604052809291908181526020018280546102f29061087f565b801561033f5780601f106103145761010080835404028352916020019161033f565b820191906000526020600020905b81548152906001019060200180831161032257829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505081526020019060010190610293565b50505050905090565b8280546103cc9061087f565b90600052602060002090601f0160209004810192826103ee5760008555610435565b82601f1061040757805160ff1916838001178555610435565b82800160010185558215610435579182015b82811115610434578251825591602001919060010190610419565b5b5090506104429190610446565b5090565b5b8082111561045f576000816000905550600101610447565b5090565b60006104766104718461076a565b610745565b90508281526020810184848401111561049257610491610945565b5b61049d84828561083d565b509392505050565b600082601f8301126104ba576104b9610940565b5b81356104ca848260208601610463565b91505092915050565b6000813590506104e281610965565b92915050565b6000602082840312156104fe576104fd61094f565b5b600082013567ffffffffffffffff81111561051c5761051b61094a565b5b610528848285016104a5565b91505092915050565b6000602082840312156105475761054661094f565b5b6000610555848285016104d3565b91505092915050565b600061056a8383610677565b905092915050565b61057b81610801565b82525050565b61058a81610801565b82525050565b600061059b826107ab565b6105a581856107ce565b9350836020820285016105b78561079b565b8060005b858110156105f357848403895281516105d4858261055e565b94506105df836107c1565b925060208a019950506001810190506105bb565b50829750879550505050505092915050565b6000610610826107b6565b61061a81856107df565b935061062a81856020860161084c565b61063381610954565b840191505092915050565b6000610649826107b6565b61065381856107f0565b935061066381856020860161084c565b61066c81610954565b840191505092915050565b600060608301600083015184820360008601526106948282610605565b91505060208301516106a96020860182610572565b5060408301516106bc60408601826106c7565b508091505092915050565b6106d081610833565b82525050565b6106df81610833565b82525050565b600060208201905081810360008301526106ff8184610590565b905092915050565b60006060820190508181036000830152610721818661063e565b90506107306020830185610581565b61073d60408301846106d6565b949350505050565b600061074f610760565b905061075b82826108b1565b919050565b6000604051905090565b600067ffffffffffffffff82111561078557610784610911565b5b61078e82610954565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061080c82610813565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561086a57808201518184015260208101905061084f565b83811115610879576000848401525b50505050565b6000600282049050600182168061089757607f821691505b602082108114156108ab576108aa6108e2565b5b50919050565b6108ba82610954565b810181811067ffffffffffffffff821117156108d9576108d8610911565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61096e81610833565b811461097957600080fd5b5056fea264697066735822122015d6e83cc9b24b82311e4dfbd93587a90069dc7d4b272d29fd7438be8932a0ec64736f6c63430008060033";

type IQFirstContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IQFirstContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IQFirstContract__factory extends ContractFactory {
  constructor(...args: IQFirstContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "IQFirstContract";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IQFirstContract> {
    return super.deploy(overrides || {}) as Promise<IQFirstContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IQFirstContract {
    return super.attach(address) as IQFirstContract;
  }
  connect(signer: Signer): IQFirstContract__factory {
    return super.connect(signer) as IQFirstContract__factory;
  }
  static readonly contractName: "IQFirstContract";
  public readonly contractName: "IQFirstContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IQFirstContractInterface {
    return new utils.Interface(_abi) as IQFirstContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IQFirstContract {
    return new Contract(address, _abi, signerOrProvider) as IQFirstContract;
  }
}
